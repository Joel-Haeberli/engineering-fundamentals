name: Build and Push Docker Image

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - main

jobs:
  code-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.2.0
        with:
          args: >
            -Dsonar.projectKey=playground
            -Dsonar.organization=iptch-1
            -Dsonar.sources=.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 

  test:
    needs: code-analysis
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: execute the unit test
        run: echo "** TASK A - Add the necessary steps such that the unit test is executed on every merge request or pull request on the main branch."


  publish-docker-image:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: jhblrengregistry.azurecr.io
          username: ${{ secrets.AZURE_USERNAME }} # Azure service principal username
          password: ${{ secrets.AZURE_PASSWORD }} # Azure service principal password

      - name: Generate and Push Git Tag for New Version
        id: versioning
        run: |
          # Fetch all tags
          git fetch --tags

          # Get the latest tag
          latest_tag=$(git tag --sort=-v:refname | head -n 1)

          # If no tags exist, start with v0.1
          if [ -z "$latest_tag" ]; then
            new_tag="v0.1"
          else
            # Increment the version by 0.1
            version_number=${latest_tag#v} # Remove the 'v' prefix
            IFS='.' read -r major minor patch <<< "$version_number"
            new_minor=$((minor + 1))
            new_tag="v$major.$new_minor"
          fi

          # Create a new tag
          git tag $new_tag

          # Push the new tag to the remote repository
          git push origin $new_tag

          # Output the new tag for subsequent steps
          echo "full_tag=$new_tag" >> "$GITHUB_OUTPUT"

      - name: Build the Docker image
        run: |
          docker build -t jhblrengregistry.azurecr.io/ipt-spins:${{ steps.versioning.outputs.full_tag }} -t jhblrengregistry.azurecr.io/ipt-spins:latest .

      - name: Push the Docker image to ACR
        run: |
          docker push jhblrengregistry.azurecr.io/ipt-spins:${{ steps.versioning.outputs.full_tag }}
          docker push jhblrengregistry.azurecr.io/ipt-spins:latest
